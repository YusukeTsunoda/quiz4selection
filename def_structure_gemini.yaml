1 ディレクトリ構造
  プロジェクトの論理的な構造を定義

1.1 概要
  プロジェクト全体の構造を階層的に整理し、各機能の配置を定義します。

1.2 具体例
  main: アプリケーションのメインモジュール
  hooks: カスタムフックの集約
  components: UIコンポーネントの管理
  pages: 各ページの管理
  db: データベース関連の管理
  server: サーバーサイドの管理

2 ファイル定義
  コンポーネントやモジュールの実装単位

2.1 概要
  各機能を実装するファイルの定義と役割を明確化します。
  フォルダやファイルの順番はabc順にする

2.2 具体例
  client/src/pages/BusinessCardViewPage.tsx: 名刺詳細ページ
  client/src/pages/SettingsPage.tsx: 設定ページ
  client/src/components/BusinessCardForm.tsx: 名刺フォームコンポーネント
  client/src/components/BusinessCardGrid.tsx: 名刺グリッドコンポーネント
  server/routes.ts: APIルート定義
  db/schema.ts: データベーススキーマ定義
  db/index.ts: データベース接続設定

3 コンテンツ定義
  コンポーネントの機能と責務の記述

3.1 概要
  各コンポーネントやモジュールの具体的な機能と責任範囲を定義します。

3.2 具体例
  - BusinessCardViewPage: 名刺の詳細表示と編集機能
  - BusinessCardForm: 名刺の作成・編集フォーム
  - BusinessCardGrid: 名刺の一覧表示
  - APIルート: ユーザー認証、名刺のCRUD操作

4 依存関係
  モジュール間の関係性の定義

4.1 概要
  コンポーネント間の依存関係と相互作用を明確化します。

4.2 具体例
  - hooks/use-business-cards.ts: 名刺データの取得・更新フック
  - hooks/use-user.ts: ユーザー情報の取得・更新フック
  - drizzle-orm: データベース操作のためのORM
  - multer: 画像アップロードのためのミドルウェア

5 ファイル構造事例
  main:
    root:
      client:
        src:
          components:
            BusinessCardForm.tsx:
              content: |-
                名刺フォームコンポーネント
                外部依存:
                - react-hook-form
                - zod
                機能:
                - 名刺情報の入力フォーム
                - バリデーション
              dependency:
                - /client/src/components/ui/form.tsx
                - /client/src/components/ui/input.tsx
                - /client/src/components/ui/textarea.tsx
                - /client/src/components/ui/button.tsx
          pages:
            BusinessCardViewPage.tsx:
              content: |-
                名刺詳細ページ
                機能:
                - 名刺の詳細表示
                - 名刺の編集
              dependency:
                - /client/src/components/BusinessCardForm.tsx
                - /client/src/components/BusinessCardGrid.tsx
                - /hooks/use-business-cards.ts
            SettingsPage.tsx:
              content: |-
                設定ページ
                機能:
                - ユーザー設定の管理
              dependency:
                - /hooks/use-user.ts
      db:
        schema.ts:
          content: |-
            データベーススキーマ定義
            機能:
            - データベースのテーブル定義
          dependency:
            - drizzle-orm
        index.ts:
          content: |-
            データベース接続設定
            機能:
            - SQLiteデータベースへの接続設定
          dependency:
            - better-sqlite3
      server:
        routes.ts:
          content: |-
            APIルート定義
            機能:
            - ユーザー認証
            - 名刺のCRUD操作
          dependency:
            - /db/schema.ts
            - /db/index.ts
            - express
            - zod
            - multer

# コード変更の整合性確認:
- 「コードの一部を変更する際は、その変更が他の部分に与える影響を必ず確認してください。特にデータの保存と取得のロジックが複数の場所に存在する場合は、すべての場所で整合性が保たれるよう注意してください。」
- 「セッション管理やキャッシュなどの状態管理に関する変更を行う場合は、アプリケーション全体でその状態がどのように使用されているかを把握してから修正を行ってください。」

# ツール使用の代替手段:
- 「特定のツール（例：edit_file）が機能しない場合は、代替手段（例：run_commandでsedを使用）を検討し、ユーザーに明確に説明してください。」
- 「ツールの失敗が発生した場合は、その原因を分析し、ユーザーが手動で適用できる具体的な手順を提供してください。」

# 段階的なテスト強化:
- 「複雑な修正を行う場合は、各段階で動作確認を行い、新たな問題が発生していないことを確認してください。特にセッション管理やデータフローに関する変更は、小さな変更ごとにテストすることを推奨します。」
- 「エラーメッセージが発生した場合は、そのメッセージを詳細に分析し、問題の根本原因を特定してから修正を行ってください。」

# コード変更の追跡:
- 「複数の修正を行う場合は、各修正の目的と影響範囲を明確に記録し、問題が発生した場合に特定の変更を元に戻せるようにしてください。」
- 「特に重要なのは、データ構造や状態管理に関する変更で、これらは他の機能に広範囲な影響を与える可能性があります。」

# エラー処理とロギングの強化:
- 「重要な機能やデータ処理の前後には適切なロギングを追加し、問題が発生した場合に原因を特定しやすくしてください。」
- 「特にセッション管理やキャッシュなどの状態に依存する処理では、状態の整合性チェックとエラー処理を強化してください。」
